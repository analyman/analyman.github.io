{"meta":{"title":"DotCircle's Blog","subtitle":"","description":"","author":"DotCircle","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"AIII","slug":"ai","date":"2020-09-07T08:04:57.155Z","updated":"2020-09-07T08:04:57.155Z","comments":true,"path":"2020/09/07/ai/","link":"","permalink":"http://yoursite.com/2020/09/07/ai/","excerpt":"","text":"AI","categories":[{"name":"AI","slug":"AI","permalink":"http://yoursite.com/categories/AI/"}],"tags":[{"name":"ai","slug":"ai","permalink":"http://yoursite.com/tags/ai/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-09-07T08:04:57.155Z","updated":"2020-09-07T08:04:57.155Z","comments":true,"path":"2020/09/07/hello-world/","link":"","permalink":"http://yoursite.com/2020/09/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Minix Clock","slug":"minix/kernel/clock","date":"2020-09-07T08:04:57.155Z","updated":"2020-09-07T08:04:57.155Z","comments":true,"path":"2020/09/07/minix/kernel/clock/","link":"","permalink":"http://yoursite.com/2020/09/07/minix/kernel/clock/","excerpt":"","text":"Clock files file brief description clock.h just some function declaration clock.c timers interrupt handler, load statistics update, functions to get statistics about times and set time lib/libtimers/timers_exp.c expire a minix_timer_t linked list lib/libtimers/timers_clr.c clear a minix timer in a linked list lib/libtimers/timers_set.c add a minix timer to a linked list types type where brief description minix_timer_t minix/timer.h timer with a callback, a sorted linked list tmr_func_t minix/timer.h timer callback function type, void (*)(int arg) struct kclockinfo type.h clock information 12345678struct kclockinfo &#123; time_t boottime; /* number of seconds since UNIX epoch */ clock_t uptime; /* number of clock ticks since system boot */ uint32_t _rsvd1; /* reserved for 64-bit uptime */ clock_t realtime; /* real time in clock ticks since boot */ uint32_t _rsvd2; /* reserved for 64-bit real time */ uint32_t hz; /* clock frequency in ticks per second */&#125;; variables variable where brief description kclockinfo glo.h global clock information kloadinfo aka loadinfo glo.h status of load average API function prototype where export brief description timer_int_handler int (*)(void) clock.c true handler of timer interrupt load_update void(*)(void) clock.c false update load information in kloadinfo, basicly number of ready process at this moment | timer_int_handler minix timer_int_handler The timer interrupt handler, and timer_int_handler() called from lapic_timer_int_handler which defined as 1234&#x2F;** arch&#x2F;i386&#x2F;apic_asm.S *&#x2F;&#x2F;* apic timer tick handlers *&#x2F;ENTRY(lapic_timer_int_handler) lapic_intr(_C_LABEL(timer_int_handler)) lapic_timer_int_handler is handler of APIC_TIMER_INT_VECTOR interrupt registered in apic_idt_init() function when kernel boot. 1234567891011121314/** arch/i386/apic.c *//* Build descriptors for interrupt gates in IDT. */void apic_idt_init(const int reset)&#123; is_bsp = is_boot_apic(apicid()); /* configure the timer interupt handler */ if (is_bsp) &#123; BOOT_VERBOSE(printf(&quot;Initiating APIC timer handler\\n&quot;)); /* register the timer interrupt handler for this CPU */ int_gate_idt(APIC_TIMER_INT_VECTOR, (vir_bytes) lapic_timer_int_handler, PRESENT | INT_GATE_TYPE | (INTR_PRIVILEGE &lt;&lt; DPL_SHIFT)); &#125;&#125; This handler increase a user tick of process of current processor and decrease virtual timer and profile timer of the process, if these timer expire after decreasing, raise corresponding signal to the process. The above processes also aply to bill process of current processor if this process is BILLABLE. If current processor is bootstraping processor, this handler will check clock_timer whether has expired, when true expire the timers. It also increase kclockinfo.realtime when current processor is bootstraping processor. load_update minix load_update store how many process is ready at this moment into kloadinfo, this information has history, keep a list of load at different moment(the interval may be very small).","categories":[{"name":"学习 Minix","slug":"学习-Minix","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-Minix/"}],"tags":[{"name":"minix","slug":"minix","permalink":"http://yoursite.com/tags/minix/"},{"name":"kernel","slug":"kernel","permalink":"http://yoursite.com/tags/kernel/"},{"name":"clock","slug":"clock","permalink":"http://yoursite.com/tags/clock/"}]}],"categories":[{"name":"AI","slug":"AI","permalink":"http://yoursite.com/categories/AI/"},{"name":"学习 Minix","slug":"学习-Minix","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-Minix/"}],"tags":[{"name":"ai","slug":"ai","permalink":"http://yoursite.com/tags/ai/"},{"name":"minix","slug":"minix","permalink":"http://yoursite.com/tags/minix/"},{"name":"kernel","slug":"kernel","permalink":"http://yoursite.com/tags/kernel/"},{"name":"clock","slug":"clock","permalink":"http://yoursite.com/tags/clock/"}]}